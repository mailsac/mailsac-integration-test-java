package com.mailsac.api;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Order;

import org.awaitility.Awaitility;

import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.exceptions.UnirestException;

@TestMethodOrder(OrderAnnotation.class)
public class AppTest {
    
    // Generated by mailsac. See https://mailsac.com/api-keys
    private static String mailsacAPIKey = "";
    // Mailsac email address where the email will be sent
    private static String mailsacToAddress = "";
    // Mailsac email address sender
    private static String mailsacFromAddress = "";

    private static String mailsacSubject = "Hello!"; 
    private static String mailsacText = "Check out https://example.com";
    private static String mailsacHTML = "Check out <a href='https://example.com'>My website</a>";

    /**
     * Deletes all messages in an inbox after tests.
     * This requires the inbox to be private, which is a paid feature of Mailsac.
     */
    static void purgeInbox() throws UnirestException {
        Unirest.delete(String.format("https://mailsac.com/api/addresses/%s/messages", mailsacToAddress))
        .header("Mailsac-Key", String.format("%s", mailsacAPIKey))
        .asString();
    }

    /**
     * Send an email with  a link to https://example.com.
     */
    @Test
    @Order(1)
    void sendMail() throws UnirestException {
        HttpResponse response = Unirest.post("https://mailsac.com/api/outgoing-messages")
        .header("content-type", "application/json")
        .header("Mailsac-Key", String.format("%s", mailsacAPIKey))
        .body(String.format("{\"to\":\"%s\",\"from\":\"%s\",\"subject\":\"%s\",\"text\":\"%s\",\"html\":\"%s\"}", mailsacToAddress, mailsacFromAddress, mailsacSubject, mailsacText, mailsacHTML))
        .asString();

        Awaitility.await("Email failed to send").atMost(50, TimeUnit.SECONDS)
        .untilAsserted(() -> assertEquals(200, response.getStatus()));
    }

    /**
     * Check if the email is received in the recipient's address and
     * confirm if the link to https://example.com arrived correctly.
     */
    @Test
    @Order(2)
    void checkReceived() throws UnirestException, JSONException {
        HttpResponse<JsonNode> response = Unirest.get(String.format("https://mailsac.com/api/addresses/%s/messages", mailsacToAddress))
        .header("Mailsac-Key", String.format("%s", mailsacAPIKey))
        .asJson();

        Awaitility.await("Never received messages!").atMost(50, TimeUnit.SECONDS)
        .untilAsserted(() -> assertTrue(!response.getBody().getArray().isEmpty()));

        Awaitility.await("Missing / Incorrect link in email").atMost(50, TimeUnit.SECONDS)
        .untilAsserted(() -> assertTrue(response.getBody().getArray().getJSONObject(0).get("links").toString().contains("https://example.com")));

        purgeInbox();
    }

}
